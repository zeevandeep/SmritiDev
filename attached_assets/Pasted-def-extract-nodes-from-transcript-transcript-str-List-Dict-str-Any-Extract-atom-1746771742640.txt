def extract_nodes_from_transcript(transcript: str) -> List[Dict[str, Any]]:
    """
    Extract atomic thought units (nodes) from a transcript.
    
    Args:
        transcript: The raw transcript text from a user session.
        
    Returns:
        List of dictionaries containing extracted nodes with their attributes.
    """
    logger.info(f"Extracting nodes from transcript of length: {len(transcript)}")
    
    prompt = f"""
    You are processing a raw text from a journaling session. The goal is to break this text into individual nodes, each representing a distinct theme or cognitive pattern. Use the provided list of themes, cognition types, and emotions for guidance. 

    Session Text:
    "{transcript}"

    Themes: ["relationships", "career", "self-worth", "family", "health", "purpose", "money", "identity", "growth", "change", "conflict", "spirituality", "creativity", "freedom", "generic"]

    Cognition Types: ["decision_intent", "self_reflection", "emotion_insight", "identity_question", "future_projection", "regret", "justification", "resignation", "generic"]

    Emotions: ["confident", "uncertain", "hopeful", "anxious", "angry", "frustrated", "guilty", "disconnected", "determined", "fearful", "content", "overwhelmed", "inspired", "doubtful", "peaceful", "disappointed", "insecure", "introspective", "resentful", "grateful", "generic"]

    Instructions:
    1. Break the text into distinct, coherent nodes, each representing a single theme. **Each theme should have at most one node per session.**
    2. Assign a **single, dominant cognition type** to each node based on the tone and structure of the text.
    3. Assign an **emotion** to each node from the provided list.
    4. **Avoid exact duplicates** â€” each part of the text should belong to only one node.
    5. **Limit one node per theme:** If multiple sentences in the session text match the same theme, select the most contextually rich or emotionally significant passage.
    6. **Fallback Logic:** If no clear match is found, use the **generic** category for theme, cognition type, or emotion as appropriate.
    7. Return the nodes in JSON format, including all necessary fields for our database schema.
    8. Do not include the same sentence in multiple nodes, even if it seems to fit multiple themes.

    Example Response:
    [
      {{
        "text": "I need to focus on my priorities.",
        "theme": "purpose",
        "cognition_type": "decision_intent",
        "emotion": "determined"
      }},
      {{
        "text": "I've been questioning my role at work.",
        "theme": "career",
        "cognition_type": "identity_question",
        "emotion": "uncertain"
      }},
      {{
        "text": "I feel disconnected from my family lately.",
        "theme": "family",
        "cognition_type": "self_reflection",
        "emotion": "disconnected"
      }}
    ]
    """
    
    try:
        logger.info("Sending request to OpenAI API...")
        start_time = time.time()
        
        response = client.chat.completions.create(
            model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            messages=[
                {"role": "system", "content": "You are an expert psychologist specialized in cognitive-emotional pattern analysis. Follow the instructions precisely and use only the specified themes, cognition types, and emotions from the provided lists. IMPORTANT: Extract multiple nodes from the journal text, aiming to capture one for each theme present (max 14 nodes). Create a diverse set of nodes, not just one. Format your response as: {\"nodes\": [{...}, {...}, {...}]} where each node has text, theme, cognition_type, and emotion fields."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"}, 
            max_tokens=2000
        )

