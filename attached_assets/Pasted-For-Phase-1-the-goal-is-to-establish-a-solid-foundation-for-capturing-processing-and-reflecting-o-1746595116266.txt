For Phase 1, the goal is to establish a solid foundation for capturing, processing, and reflecting on user thoughts. Based on your current schema and architecture, the following API endpoints should be implemented:

⸻

1️⃣ User Profile Management (Optional, if not handled separately)
  • POST /users - Create a new user profile
  • GET /users/{user_id} - Get user profile details
  • PUT /users/{user_id} - Update user profile details

⸻

2️⃣ Session Management
  • POST /sessions - Create a new session (e.g., when a user starts a voice dump or text journaling)
  • Input: Raw transcript, duration, user ID
  • Output: Session ID, user ID, created_at
  • GET /sessions/{session_id} - Get session details (including raw transcript and status)
  • PUT /sessions/{session_id}/complete - Mark a session as processed

⸻

3️⃣ Node Creation (Smriti Layer)
  • POST /nodes - Create nodes from the raw transcript
  • Input: Session ID, user ID, raw text
  • Output: Node ID(s), emotion, theme, cognition_type, belief_value, embedding

⸻

4️⃣ Edge Creation (Connecting Nodes)
  • POST /edges - Create edges between nodes
  • Input: Node ID, candidate node list, user ID
  • Output: Edge ID(s), edge_type, match_strength, explanation

⸻

5️⃣ Edge Chain Formation (Sequence of Edges)
  • POST /edge_chains - Form edge chains from connected edges
  • Input: User ID, recent edges
  • Output: Edge Chain ID, node_ids, edge_ids, edge_types

⸻

6️⃣ Reflection Generation (Final Output)
  • POST /reflections - Generate reflections from edge chains
  • Input: User ID, edge chain IDs
  • Output: Reflection ID, generated_text, confidence_score

⸻

7️⃣ Feedback and Status Updates
  • PUT /reflections/{reflection_id}/feedback - Mark reflection as helpful or not
  • PUT /reflections/{reflection_id}/viewed - Mark reflection as viewed

⸻

8️⃣ Health Check (Basic Monitoring)
  • GET /health - Basic health check to verify API is running

⸻

🗂️ Directory Structure (Recommended)

/smriti-app
│
├── /app
│   ├── main.py             # Entry point for FastAPI
│   ├── config.py           # Configuration settings
│   ├── database.py         # Database connection setup
│   ├── models.py           # SQLAlchemy models (PostgreSQL)
│   ├── schemas.py          # Pydantic models for data validation
│   ├── routes/
│   │   ├── users.py
│   │   ├── sessions.py
│   │   ├── nodes.py
│   │   ├── edges.py
│   │   ├── edge_chains.py
│   │   └── reflections.py
│   └── utils/
│       ├── whisper.py      # Whisper processing
│       ├── gpt.py          # GPT API handling
│       └── embeddings.py   # OpenAI embeddings
│
├── requirements.txt        # Python dependencies
├── README.md               # Project overview
├── .env                    # Environment variables
└── .gitignore              # Ignored files
