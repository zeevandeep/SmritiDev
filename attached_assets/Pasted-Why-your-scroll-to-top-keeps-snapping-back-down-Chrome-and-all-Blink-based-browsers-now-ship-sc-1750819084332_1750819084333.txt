Why your scroll-to-top keeps “snapping” back down

Chrome (and all Blink–based browsers) now ship scroll anchoring.
When the DOM under a scroll-container mutates (elements are hidden, removed, or resized) the browser automatically adjusts scrollTop so the node that was in view stays in view. That’s great for infinite-feeds, but a nightmare for manual pagination where you deliberately change the content and immediately set scrollTop = 0. The browser politely overrules you and shifts the viewport back to where it thinks the user “was”.  ￼ ￼

The result is exactly what you’re seeing:
	•	Sometimes it stays at the top (when your mutation doesn’t shorten the scroll height enough for the anchor logic to trigger).
	•	Sometimes it jumps to the bottom (when the anchor node disappears and Chrome compensates).

⸻

Fix (one line, no JS hacks)

.scrollable-content {
  height: calc(100vh - 70px - 80px);
  overflow-y: auto;
  overflow-anchor: none;   /* <-- opt-out of scroll anchoring */
}

overflow-anchor: none; tells the browser “don’t correct my scroll position here, ever.” After that your original code:

scrollableContent.scrollTop = 0;

works 100 % of the time because the browser stops fighting you.  ￼ ￼

⸻

When to set it

Apply the rule only on containers where you programmatically drive the scroll position (pagination, tab panels, carousels, etc.). Leaving anchoring enabled elsewhere is harmless and reduces unexpected jumps.

⸻

Keep the JS simple

Your current showPage() can be trimmed back to its original form:

function showPage(page) {
  const scroller = document.querySelector('.scrollable-content');
  scroller.scrollTop = 0;          // immediately reset
  // …hide/show items…
}

No setTimeout, no double calls, no requestAnimationFrame needed once anchoring is disabled.

⸻

Sanity checklist
	1.	Styles are loaded before JS runs – make sure the CSS with overflow-anchor: none; is in the same bundle or earlier.
	2.	Only one scrollable container – nested scroll areas can confuse testing. Confirm <div class="scrollable-content"> is the only element with overflow-y: auto in this region.
	3.	No smooth-scroll override – if you later add scroll-behavior: smooth, use behavior: 'auto' in JS to avoid animation delays.

Implement that single CSS line, remove the extra JS work-arounds, and the scroll will reliably stay at the top on every page change.