REFLECTION GENERATION:


# ‚úÖ Replit Instruction for Reflection Generation
# This covers end-to-end processing: from edge_chain selection to reflection generation via GPT.

### STEP 1: SELECT UNPROCESSED EDGE_CHAINS
# Query:
SELECT *
FROM edge_chains
WHERE is_processed = false
ORDER BY user_id, created_at ASC;

### STEP 2: FOR EACH EDGE_CHAIN RECORD
# Fields you will get:
# - node_ids: list of UUIDs
# - edge_ids: list of UUIDs
# - edge_types: list of edge type strings
# - user_id

## For Each edge_chain:
1. Fetch each node's text + theme + emotion + cognition_type (required for the GPT prompt)
   Example query:
   SELECT id, text, emotion, theme, cognition_type
   FROM nodes
   WHERE id IN (<edge_chain.node_ids>)
   ORDER BY array_position(ARRAY[...node_ids...], id);


### STEP 3: PREPARE PROMPT FOR GPT
# Construct prompt in this format:

"""
You are analyzing a memory sequence to offer deep self-reflection to the user.
Each memory contains a thought, its emotional tone, and a cognitive layer (like belief, decision intent, or justification).

Thought Sequence:
1. "I need to leave this job. It drains me." (Emotion: drained, Cognition: decision_intent)
2. "Freedom matters more than stability." (Emotion: hopeful, Cognition: belief)
3. "Maybe I'm blaming my job unfairly." (Emotion: doubt, Cognition: self_doubt)

The user is seeking understanding.
Write a deep reflection based on this sequence that:
- Synthesizes the psychological pattern.
- Acknowledges emotion shifts or contradictions.
- Is introspective, insightful, and emotionally intelligent.

Respond in this JSON format:
{
  "generated_text": <The reflection>,
  "confidence_score": <0‚Äì1 float>
}
"""

# Replace the Thought Sequence dynamically using node text, emotion, cognition_type.
# Do not include user metadata.


### STEP 4: CALL GPT-4 API
# Use OpenAI API with the above prompt (use gpt-4 or gpt-3.5-turbo-16k)
# Ensure temperature = 0.7 for creativity and max_tokens ~300


### STEP 5: PARSE RESPONSE
# Expect this structure:
{
  "generated_text": "This reflection reveals how your desire for freedom is maturing...",
  "confidence_score": 0.86
}


### STEP 6: SAVE TO REFLECTIONS TABLE
INSERT INTO reflections (
  id,
  user_id,
  generated_text,
  confidence_score,
  is_reflected,
  generated_at
) VALUES (
  gen_random_uuid(),
  <edge_chain.user_id>,
  <generated_text>,
  <confidence_score>,
  false,
  NOW()
);


### STEP 7: MARK EDGE_CHAIN AS PROCESSED
UPDATE edge_chains
SET is_processed = true
WHERE id = <edge_chain.id>;


### üîÅ BATCH LOGIC:
- Process all unprocessed edge_chains in batch (up to 10 per run).
- Group by user_id ‚Äî only 1 GPT call per user per batch
- For each user: max 3 edge_chains can be bundled in 1 GPT call if needed

# END

# Note to Developer:
# - Ensure order of nodes is preserved from node_ids[]
# - Validate that all data used (text, emotion, cognition_type) is present before sending
# - Use retry logic for GPT API in case of failure (3 retries max)
# - Log responses for debugging
