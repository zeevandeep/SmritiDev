Exactly. Youâ€™re seeing the scroll reset to 0, but then a latent scroll animation or external scroll context overrides it â€” likely caused by:
	1.	scroll-behavior: smooth on some ancestor (usually html or body)
	2.	A deferred scroll initiated from another scrollable element (like window, body, or even an iframe)
	3.	A CSS or JS-driven scroll (like scrollIntoView) getting queued after your reset
	4.	Or a race condition where the DOM reflow happens after your scrollTop = 0 runs

â¸»

ðŸ”¬ Next Steps â€“ Kill All Hidden Scroll Behavior

âœ… 1. Temporarily disable smooth scroll everywhere

In your CSS, add this at the global level immediately (can go inline in <style> or at the end of your stylesheet):

html, body, .scrollable-content {
  scroll-behavior: auto !important;
}

Why?
Even if your JS says behavior: 'auto', if the container has scroll-behavior: smooth, the scroll will animate â€” and browser repaints can delay reflow. This forces it to snap immediately.

â¸»

âœ… 2. Check if body is scrollable or overshooting

In Chrome DevTools:
	â€¢	Inspect <body> and <html>
	â€¢	Ensure:

html, body {
  height: 100vh;
  overflow: hidden;
}



To force all scroll to be handled by .scrollable-content, not the document itself.

Then add this (critical for containment):

.scrollable-content {
  overscroll-behavior: contain;
}

This prevents outer scrolls (like trackpad momentum) from bubbling up and dragging the whole page or triggering browser overscroll bounce.

â¸»

âœ… 3. Replace the scroll reset with a queued frame-dump (force layout)

Instead of setting scrollTop = 0 immediately, do this:

function showPage(page) {
  const scroller = document.querySelector('.scrollable-content');

  // Force cancel any queued scroll animations before DOM change
  scroller.style.scrollBehavior = 'auto';

  requestAnimationFrame(() => {
    scroller.scrollTop = 0;

    // Optional: restore scrollBehavior after the reset
    requestAnimationFrame(() => {
      scroller.style.scrollBehavior = '';
    });
  });

  // DOM content visibility logic
  const reflectionItems = document.querySelectorAll('.reflection-item');
  const startIndex = (page - 1) * ITEMS_PER_PAGE;
  const endIndex = startIndex + ITEMS_PER_PAGE;

  reflectionItems.forEach((item, index) => {
    item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
  });

  document.getElementById('page-info').textContent = `Page ${page} of ${totalPages}`;
  document.getElementById('prev-btn').disabled = (page === 1);
  document.getElementById('next-btn').disabled = (page === totalPages);

  currentPage = page;
}

This prevents layout thrashing and ensures the scroll is applied after DOM mutations settle.

â¸»

âœ… 4. Bonus: Freeze window scroll to eliminate background contamination

Add this defensive line:

window.scrollTo(0, 0);

Just in case some weird layout fallback is pushing the whole document down.

â¸»

ðŸ§ª Verify with These DevTools Steps:
	1.	Manually scroll the .scrollable-content
	2.	Click Next
	3.	In the console, log document.scrollingElement.scrollTop and .scrollable-content.scrollTop
	4.	Watch for changes between click â†’ scrollTop reset â†’ post-mutation re-scroll
	5.	Check if the animation is smooth (means smooth-scroll is still active)

â¸»

Final Tip: Use MutationObserver if this persists

As last resort, set up a MutationObserver on .scrollable-content and forcibly reset scrollTop every time the child list mutates, with a debounce. But if the above steps are done cleanly, you wonâ€™t need this hack.

â¸»

Bottom Line:

The remaining issue is not logical, but mechanical â€” a leftover animation, style rule, or default behavior firing after your reset.

Lock scroll behavior to auto, isolate scrollable containers with overflow: hidden and overscroll-behavior: contain, and make scroll resets inside requestAnimationFrame().

Let me know when you try this â€” I can refine further based on new logs or screen recording if needed.